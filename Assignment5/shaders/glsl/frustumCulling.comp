#version 460

layout(set = 0, binding = 0) uniform CameraData{
    vec3 cameraWorldPos;
    mat4 view;
    mat4 projection;
}camera;

struct IndexedIndirectCommand{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};


layout(set = 1, binding = 0) readonly buffer ModelData{
    mat4 transforms[]; 
} model;

layout(set = 1, binding = 1) uniform BoundingBox {
    vec3 min;
    vec3 max;
}bb;

layout(set = 1, binding = 2) uniform Size{
    uint size;
};

layout(set = 1, binding = 3) writeonly buffer VisibilityBuffer {
    uint visibilityFlags[]; // Array of visibility flags (0 if not visible, 1 if visible)
};

layout(set = 1, binding = 4) buffer IndirectCommands{
    IndexedIndirectCommand indirectCommands[];
};

layout(set = 1, binding = 5) uniform IndexCount{
    uint indexCount;
}topology;

layout(local_size_x = 64) in;

void main() {
    uint instanceID = gl_GlobalInvocationID.x; // Assuming 1D dispatch for simplicity
    if (instanceID >= size) return;  
    // Transform the bounding box to clip space
    mat4 currentTransform = model.transforms[instanceID];

    
vec4 corners[8] = {
        {bb.min.x, bb.min.y, bb.min.z, 1.0}, // x y z
        {bb.max.x, bb.min.y, bb.min.z, 1.0}, // X y z
        {bb.min.x, bb.max.y, bb.min.z, 1.0}, // x Y z
        {bb.max.x, bb.max.y, bb.min.z, 1.0}, // X Y z

        {bb.min.x, bb.min.y, bb.max.z, 1.0}, // x y Z
        {bb.max.x, bb.min.y, bb.max.z, 1.0}, // X y Z
        {bb.min.x, bb.max.y, bb.max.z, 1.0}, // x Y Z
        {bb.max.x, bb.max.y, bb.max.z, 1.0}, // X Y Z
    };


    // Check if the bounding box is visible in clip space
    bool isVisible = true;

    for (int corner_idx = 0; corner_idx < 8; corner_idx++) {
        // Transform vertex
        vec4 corner = camera.projection * camera.view * currentTransform * corners[corner_idx];
        corner /= corner.w;
        // Check vertex against clip space bounds
        if (!isVisible || corner.x >= 1 || corner.x <= -1 || corner.y >= 1 || corner.y <= -1 || corner.z > 1 || corner.z < 0){
            isVisible = false;
        }
    }
    
    //setting the indirect command of the current instance
    IndexedIndirectCommand currentCommand = indirectCommands[instanceID];
    currentCommand.indexCount = topology.indexCount; 
    currentCommand.instanceCount = isVisible ? 1 : 0;
    currentCommand.firstIndex = 0;
    currentCommand.vertexOffset = 0;
    currentCommand.firstInstance = 0;

    //needed to display visibility
    visibilityFlags[instanceID] = isVisible ? 1 : 0;
    //visibilityFlags[instanceID] = currentCommand.indexCount>0 ? 1 : 0;

}